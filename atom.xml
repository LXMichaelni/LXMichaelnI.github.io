<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MK&#39;S Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-10T17:16:04.568Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Michael Ni</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AcWing 831. KMP字符串</title>
    <link href="http://example.com/2023/03/11/AcWing-831-KMP/"/>
    <id>http://example.com/2023/03/11/AcWing-831-KMP/</id>
    <published>2023-03-10T17:10:44.498Z</published>
    <updated>2023-03-10T17:16:04.568Z</updated>
    
    <content type="html"><![CDATA[<p>KMP算法求解：</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 $S$，以及一个模式串 $P$，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p><p>模式串 $P$ 在字符串 $S$ 中多次作为子串出现。</p><p>求出模式串 $P$ 在字符串 $S$ 中所有出现的位置的起始下标。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数 $N$，表示字符串 $P$ 的长度。</p><p>第二行输入字符串 $P$。</p><p>第三行输入整数 $M$，表示字符串 $S$ 的长度。</p><p>第四行输入字符串 $S$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出所有出现位置的起始下标（下标从 $0$ 开始计数），整数之间用空格隔开。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 \le N \le 10^5$<br>$1 \le M \le 10^6$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>3aba5ababa</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>0 2</code></pre><hr><h3 id="什么是KMP算法"><a href="#什么是KMP算法" class="headerlink" title="什么是KMP算法"></a>什么是KMP算法</h3><p>KMP是一个字符串匹配算法，对暴力的那种一 一比对的方法进行了优化，使时间复杂度大大降低</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>1、s[ ]是模板串，即比较长的字符串。<br>2、p[ ]是模式串，即比较短的字符串。<br>3、“非平凡前缀”：指除了最后一个字符以外，一个字符串的全部头部组合。<br>4、“非平凡后缀”：指除了第一个字符以外，一个字符串的全部尾部组合。（后面会有例子，均简称为前&#x2F;后缀）<br>5、“部分匹配值”：前缀和后缀的最长共有元素的长度。<br>6、next[ ]是“部分匹配值表”，即next数组，它存储的是每一个下标对应的“部分匹配值”，是KMP算法的核心。（后面作详细讲解）。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在每次失配时，不是把p串往后移一位，而是把p串往后移动至下一次可以和前面部分匹配的位置，这样就可以跳过大多数的失配步骤。而每次p串移动的步数就是通过查找next[ ]数组确定的</p><p>next数组的含义：对next[ j ] ，是p[ 1, j ]串中前缀和后缀相同的最大长度（部分匹配值），</p><p>即 p[ 1, next[ j ] ] &#x3D; p[ j - next[ j ] + 1, j ]。</p><p>如:</p><p>p串：a b a a b</p><p>下标: 1 2 3 4 5</p><p>next[5]&#x3D;2 因为[1,2]&#x3D;[4,5] “a b”&#x3D;”a b”.</p><p>模拟一下，对p&#x3D;”abcab”</p><table><thead><tr><th>p</th><th>a</th><th>b</th><th>c</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>下标</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>next[]</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><table><thead><tr><th></th><th>前缀</th><th>后缀</th></tr></thead><tbody><tr><td>next[ 1 ]</td><td>空集</td><td>空集</td></tr><tr><td>next[ 2 ]</td><td>a</td><td>b</td></tr><tr><td>next[ 3 ]</td><td>a  ab</td><td>c  bc</td></tr><tr><td>next[ 4 ]</td><td>a  ab  abc</td><td>a  ca  bca</td></tr><tr><td>next[ 5 ]</td><td>a  ab  abc  abca</td><td>b  ab  cab  bcab</td></tr></tbody></table><h3 id="怎么求最长公共前缀和后缀长度"><a href="#怎么求最长公共前缀和后缀长度" class="headerlink" title="怎么求最长公共前缀和后缀长度"></a>怎么求最长公共前缀和后缀长度</h3><p>我们需要遍历模式串中的每个字符，计算以当前字符为结尾的最长公共前缀和后缀长度。假设当前字符的位置是 i，我们需要找到一个最大的 j，使得模式串的前缀 p[1..j] 与后缀 p[i-j+1..i] 相同，其中 j &lt;&#x3D; i-1。</p><p>我们可以用一个变量 j 来表示这个长度，初始值为 0，表示当前字符没有任何前缀和后缀匹配。然后我们不断地将 j 向前移动，直到找到一个最大的 j，使得 p[1..j] 与 p[i-j+1..i] 相同或者 j&#x3D;0。</p><p>最终得到的 j 就是以 i 位置的字符为结尾的最长公共前缀和后缀长度，将其存储在 next 数组的第 i 个位置即可。</p><h3 id="匹配思路和实现代码"><a href="#匹配思路和实现代码" class="headerlink" title="匹配思路和实现代码"></a>匹配思路和实现代码</h3><p> KMP主要分两步：求next数组、匹配字符串</p><p>其中next数组由模式串与自身匹配得出，匹配字符串利用next[]加速匹配过程</p><p>匹配字符串：</p><p> s串 和 p串都是从1开始的。i 从1开始，j 从0开始，每次s[ i ] 和p[ j + 1 ]比较</p><p><img src="/image">.png)</p><p>当匹配过程到上图所示时</p><p>s[ a , b ] &#x3D; p[ 1, j ] &amp;&amp; s[ i ] !&#x3D; p[ j + 1 ] 此时要移动p串（不是移动1格，而是直接移动到下次能匹配的位置）</p><p>其中1号串为[ 1, next[ j ] ]，3号串为[ j - next[ j ] + 1 , j ]。由匹配可知 1号串等于3号串，3号串等于2号串。所以直接移动p串使1号到3号的位置即可。这个操作可由j &#x3D; next[ j ]直接完成。 如此往复下去，当 j &#x3D;&#x3D; m时匹配成功。</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100010</span>,M=<span class="number">1000010</span>;<span class="comment">//M多一个0 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ne[N];</span><br><span class="line"><span class="type">char</span> s[M],p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;p+<span class="number">1</span>&gt;&gt;m&gt;&gt;s+<span class="number">1</span>; <span class="comment">//导入数据</span></span><br><span class="line"><span class="comment">//预处理模式串 j 表示当前最长公共前缀和的长度,i表示当前处理的字符下标。 </span></span><br><span class="line">    <span class="comment">//得到最长公共前缀和的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123; <span class="comment">//i从2开始，因为第一位的前缀为0,后缀也为0 </span></span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>]) j=ne[j]; <span class="comment">//匹配不成功,j从p[1.....j+1]回退到p[1.....j]的状态 </span></span><br><span class="line"><span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++; <span class="comment">//匹配成功,j+1,继续匹配 </span></span><br><span class="line">ne[i]=j; <span class="comment">//让这一位的值等于j,ne[i]表示以第i个字符结尾的子串的最长公共前缀和的长度。</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 在文本串中匹配模式串</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;s[i]!=p[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line"><span class="keyword">if</span>(s[i]==p[j+<span class="number">1</span>]) j++; </span><br><span class="line"><span class="keyword">if</span>(j==n)&#123; <span class="comment">//若j的长度等于n(匹配成功)输出 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i-n);</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="局部代码讲解"><a href="#局部代码讲解" class="headerlink" title="局部代码讲解"></a>局部代码讲解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++) <span class="comment">//i指什么</span></span><br></pre></td></tr></table></figure><p><code>i</code> 表示当前处理的模式串中的字符位置，从第 2 个字符开始遍历，为什么不从1开始遍历？因为第 1 个字符的最长公共前缀和后缀长度为 0（因为它没有前缀和后缀）。在 KMP 算法中，对于每个字符位置 i，我们需要计算出以该字符为结尾的最长公共前缀和后缀长度，即 <code>ne[i]</code>，并将其存储在 <code>ne</code> 数组中。</p><p><code>j</code> 则表示当前处理的字符位置 i 的前一个字符位置的最长公共前缀和后缀长度。在计算 <code>ne[i]</code> 的过程中，我们需要不断地将 <code>j</code> 更新为前一个位置的最长公共前缀和后缀长度，直到找到一个能与当前字符匹配的位置或者 j&#x3D;0（表示当前字符没有任何前缀和后缀与前面已经匹配的部分匹配）。然后，如果当前字符与 j+1 位置的字符匹配，那么将 j 的值增加 1，表示以当前字符为结尾的最长公共前缀和后缀长度为 j+1。最后，将 <code>ne[i]</code> 的值设置为 j，表示以 i 位置的字符为结尾的最长公共前缀和后缀长度为 j。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=n;i++)&#123;  </span><br><span class="line"><span class="keyword">while</span>(j&amp;&amp;p[i]!=p[j+<span class="number">1</span>]) j=ne[j];</span><br><span class="line"><span class="keyword">if</span>(p[i]==p[j+<span class="number">1</span>]) j++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是求解模式串 <code>p</code> 的每个前缀的最长相同前缀和后缀的长度，结果存储在一个称为 <code>ne</code> 的数组中。</p><p>具体的过程是：</p><ol><li>从第二个字符开始，依次枚举模式串 <code>p</code> 中的每个字符，用 <code>i</code> 表示当前枚举到的字符的下标。</li><li>初始化一个变量 <code>j</code> 为 0，表示当前已经匹配到的最长相同前缀和后缀的长度，也就是模式串 <code>p[1...j]</code> 的前缀和后缀相同。</li><li>在每次循环中，如果 <code>p[i]</code> 和 <code>p[j+1]</code> 相同，就将 <code>j</code> 加 1，表示当前已经匹配到了 <code>p[1...j+1]</code> 的最长相同前缀和后缀。</li><li>如果 <code>p[i]</code> 和 <code>p[j+1]</code> 不同，就需要不断回退 <code>j</code> 的值，直到 <code>j</code> 变成 0 或者找到一个 <code>j&#39;</code> 满足 <code>p[1...j&#39;]</code> 是 <code>p[1...i-1]</code> 的相同前缀和后缀，这个过程通过 <code>while</code> 循环实现。</li><li>最终，将当前的 <code>j</code> 值存储在 <code>ne[i]</code> 中，表示以第 <code>i</code> 个字符为结尾的最长相同前缀和后缀的长度。</li><li>遍历完整个模式串后，<code>ne</code> 数组中就存储了每个前缀的最长相同前缀和后缀的长度。</li></ol><h5 id="不断回退-j-的值是什么意思"><a href="#不断回退-j-的值是什么意思" class="headerlink" title="不断回退 j 的值是什么意思?"></a>不断回退 j 的值是什么意思?</h5><p>在 <code>while</code> 循环中，不断回退 <code>j</code> 的值意味着不断地缩小当前的最长相同前缀和后缀的长度。这是因为当前的字符 <code>p[i]</code> 和最长相同前缀和后缀的下一个字符 <code>p[j+1]</code> 不相等，所以需要回退 <code>j</code> 的值。具体来说，如果当前的 <code>j</code> 值不为 0，说明已经找到了一个 <code>p[1...j]</code> 是 <code>p[1...i-1]</code> 的相同前缀和后缀，但是当前的字符 <code>p[i]</code> 和 <code>p[j+1]</code> 不匹配。因此需要将 <code>j</code> 的值回退，使得 <code>p[1...j]</code> 变成 <code>p[1...j&#39;]</code> 的相同前缀和后缀</p><p>如果 <code>j&#39;</code> 不存在，则说明当前的最长相同前缀和后缀的长度已经缩小到 0，即当前的前缀没有相同的前缀和后缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j=ne[j]</span><br></pre></td></tr></table></figure><p><code>j=ne[j]</code> 是在更新最长相同前缀和后缀的长度。当找到一个匹配的字符后，需要将当前的 <code>j</code> 值加 1，表示已经匹配了一个字符，然后再继续匹配下一个字符。如果匹配到最后一个字符，那么就找到了一个完整的 <code>p</code> 字符串在 <code>s</code> 字符串中的出现位置。</p><p>如果匹配，那么将 <code>j</code> 加 1，表示当前的相同前缀和后缀长度增加了一个字符，然后继续匹配下一个字符。如果不匹配，就继续回退 <code>j</code> 的值，缩短相同前缀和后缀的长度。这样做可以避免不必要的字符匹配，</p><h5 id="将-j-的值回退到-ne-j-是将j-1吗"><a href="#将-j-的值回退到-ne-j-是将j-1吗" class="headerlink" title="将 j 的值回退到 ne[j]是将j-1吗?"></a>将 j 的值回退到 ne[j]是将j-1吗?</h5><p>不是。将 <code>j</code> 的值回退到 <code>ne[j]</code> 相当于将 <code>j</code>从p[1…j+1] 更新回 <code>p[1...j]</code> 的最长相同前缀和后缀的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(j==n)</span><br></pre></td></tr></table></figure><p><code>if(j==n)</code> 是 KMP 算法匹配成功的判断条件，表示当前的 <code>j</code> 已经匹配到了模式串的末尾，即已经匹配成功了。此时可以记录下匹配成功的位置，并将 <code>j</code> 更新为 <code>ne[j]</code> 继续进行匹配，寻找下一个匹配位置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;KMP算法求解：&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串 $S$，以及一个模式串 $P$，所有字符串中只包含大小写英文字母以及阿拉伯数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>AcWing 154. 滑动窗口</title>
    <link href="http://example.com/2023/03/10/AcWing-154/"/>
    <id>http://example.com/2023/03/10/AcWing-154/</id>
    <published>2023-03-10T13:52:02.342Z</published>
    <updated>2023-03-10T14:02:11.425Z</updated>
    
    <content type="html"><![CDATA[<p>今天解决滑动窗口问题</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个大小为 $n \le 10^6$ 的数组。</p><p>有一个大小为 $k$ 的滑动窗口，它从数组的最左边移动到最右边。</p><p>你只能在窗口中看到 $k$ 个数字。</p><p>每次滑动窗口向右移动一个位置。</p><p>以下是一个例子：</p><p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>，$k$ 为 $3$。</p><table><thead><tr><th align="center">窗口位置</th><th align="center">最小值</th><th align="center">最大值</th></tr></thead><tbody><tr><td align="center">[1 3 -1] -3 5 3 6 7</td><td align="center">-1</td><td align="center">3</td></tr><tr><td align="center">1 [3 -1 -3] 5 3 6 7</td><td align="center">-3</td><td align="center">3</td></tr><tr><td align="center">1 3 [-1 -3 5] 3 6 7</td><td align="center">-3</td><td align="center">5</td></tr><tr><td align="center">1 3 -1 [-3 5 3] 6 7</td><td align="center">-3</td><td align="center">5</td></tr><tr><td align="center">1 3 -1 -3 [5 3 6] 7</td><td align="center">3</td><td align="center">6</td></tr><tr><td align="center">1 3 -1 -3 5 [3 6 7]</td><td align="center">3</td><td align="center">7</td></tr></tbody></table><p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含两行。</p><p>第一行包含两个整数 $n$ 和 $k$，分别代表数组长度和滑动窗口的长度。</p><p>第二行有 $n$ 个整数，代表数组的具体数值。</p><p>同行数据之间用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含两个。</p><p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p><p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre><code>8 31 3 -1 -3 5 3 6 7</code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre><code>-1 -3 -3 -3 3 33 3 5 5 6 7</code></pre><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>最小值和最大值分开来做，两个for循环完全类似，都做以下四步：</p><p>· 解决队首已经出窗口的问题;<br>· 解决队尾与当前元素a[i]不满足单调性的问题;<br>· 将当前元素下标加入队尾;<br>· 如果满足条件则输出结果;</p><p>需要注意的细节：</p><p>· 上面四个步骤中一定要先3后4，因为有可能输出的正是新加入的那个元素;<br>· 队列中存的是原数组的下标，取值时要再套一层，a[q[]];<br>· 算最大值前注意将hh和tt重置;<br>· hh从0开始，数组下标也要从0开始。</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="D:\blog\source\img\552.png" alt="552"></h3><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> e[N],q[N],hh,tt=<span class="number">-1</span>; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//e[]表示存储数组,q[]表示双端队列</span></span><br><span class="line"><span class="comment">//tt和hh分别表示双端队列的队尾和队首</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123; <span class="comment">//求最小 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e[i]);</span><br><span class="line"><span class="keyword">if</span>(i-k+<span class="number">1</span>&gt;q[hh]) ++hh; <span class="comment">//如果队首(窗口中最左侧的元素)超出了窗口左端点，把队首出队,更新队列 </span></span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt&amp;&amp;e[i]&lt;=e[q[tt]]) --tt; <span class="comment">//当双端队列不空,并且当前待加入队列的元素e[i]小于等于队列中队尾(最右边的数)元素 e[q[tt]]时弹出队尾</span></span><br><span class="line">q[++tt]=i;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, e[q[hh]]); <span class="comment">//表示当前窗口大小是否达到了 k,够了就输出 </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">hh = <span class="number">0</span>; tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123; <span class="comment">//求最大 </span></span><br><span class="line"><span class="keyword">if</span>(i-k+<span class="number">1</span>&gt;q[hh]) ++hh;</span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt&amp;&amp;e[i]&gt;=e[q[tt]]) --tt;</span><br><span class="line">q[++tt]=i;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, e[q[hh]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序然后从左到右循环遍历数组 a，对于每个元素 a[i]，它执行以下操作：</p><ol><li>如果队列头的下标在滑动窗口之外，通过将 hh 加 1 来删除队列头。</li><li>当队列不为空并且队列中最后一个元素不比当前元素 a[i] 大&#x2F;小时，通过将 tt 减 1 来删除队列尾。</li><li>通过将 tt 加 1 来将下标 i 添加到队列尾。</li><li>如果当前下标 i 大于或等于 k-1（即滑动窗口已满），输出窗口中的最大&#x2F;最小元素，即 a[q[hh]]。</li></ol><p>在遍历最大值的循环之后，程序重置了双端队列和 hh 和 tt 下标，然后通过将步骤 2 中的比较运算符改为 &lt;&#x3D;，重复相同的循环来求最小值。</p><h4 id="q-的作用"><a href="#q-的作用" class="headerlink" title="q[]的作用"></a>q[]的作用</h4><p>q[] 数组是用来存储 a[] 数组中的下标的。具体来说，我们维护一个双端队列 q[]，队列中的元素表示 a[] 数组中的下标。在计算窗口中的最大值或最小值时，我们只需要在队列中找到对应的下标，然后取出 a[] 数组中的对应元素即可。这样做的好处是，可以避免在队列中存储元素的值，从而节省空间，同时也方便维护队列的单调性。</p><h4 id="我们局部来说明其中的几行代码"><a href="#我们局部来说明其中的几行代码" class="headerlink" title="我们局部来说明其中的几行代码"></a>我们局部来说明其中的几行代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hh = 0; tt = -1;</span><br></pre></td></tr></table></figure><p>这里 tt 被初始化为 -1 的原因是因为在第一次执行 while 循环时，需要将队尾元素弹出，而此时队列是空的，如果 tt 被初始化为 0，那么在第一次执行 while 循环时，tt 就会变为 -1，会导致数组越界。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(i-k+1&gt;q[hh]) ++hh;</span><br></pre></td></tr></table></figure><p>在滑动窗口算法中，我们需要维护一个大小为 k 的窗口在数组中滑动，每次滑动窗口移动一个位置。当窗口滑动到某个位置时，我们需要输出该窗口中的最大值或最小值。为了实现这个算法，我们使用双端队列来存储窗口中的元素的下标。具体来说，我们维护一个下标单调递减（最大值）或递增（最小值）的队列，这样队列头的下标对应的元素就是当前窗口中的最大值或最小值。</p><p>那么，如何判断队列头的下标是否在当前窗口中呢？假设当前窗口的右端点为 i，左端点为 i-k+1（因为窗口大小为 k），队列头的下标为 j。如果 j 不在 [i-k+1, i] 这个区间内，那么 j 对应的元素已经不在当前窗口中了，因为它距离右端点 i 的距离已经超过了 k。因此，我们需要将队列头出队，直到队列头的下标在 [i-k+1, i] 这个区间中为止。这个过程就是 while 循环中的语句 i-k+1 &gt; q[hh] 的作用。当这个条件成立时，说明队列头的下标已经不在当前窗口中了，需要将队列头出队。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while(hh&lt;=tt&amp;&amp;e[i]&lt;=e[q[tt]]) --tt;</span><br></pre></td></tr></table></figure><p>这行代码表示：当双端队列不为空，并且当前待加入队列的元素 e[i] 小于等于队列中队尾元素 e[q[tt]] 时，我们需要将队尾元素弹出，因为这时的队尾元素已经不可能成为当前窗口的最大值或最小值。具体来说，由于双端队列维护的是下标单调递减或递增的队列，当当前元素比队尾元素小时，当前元素不可能成为窗口中的最大值或最小值，因此我们需要将队尾元素弹出。这样做的目的是保证双端队列中的元素是窗口中有用的元素，即有可能成为最大值或最小值的元素。另外，由于是判断当前元素 e[i] 是否小于等于队尾元素 e[q[tt]]，因此这里的队尾元素是指双端队列中下标为 q[tt] 的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (i + 1 &gt;= k) printf(&quot;%d &quot;, e[q[hh]]);</span><br></pre></td></tr></table></figure><p>这个条件表示当前窗口大小是否达到了 k，也就是当前窗口中有 k 个元素。由于在循环中每处理一个新的元素，窗口的大小就会增加 1，因此当循环到第 i 个元素时，当前窗口的大小为 i+1，所以当 i+1&gt;&#x3D;k 时，表示当前窗口的大小已经达到了 k，可以开始输出当前窗口的最大值或最小值。并且，当剩下的元素不足k个时，停止输出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天解决滑动窗口问题&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个大小为 $n \le 10^6$ 的数组。&lt;/p&gt;
&lt;p&gt;有一个大小为 $k$ </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>将网站架设在github上</title>
    <link href="http://example.com/2023/03/09/deploy-on-github/"/>
    <id>http://example.com/2023/03/09/deploy-on-github/</id>
    <published>2023-03-09T01:17:15.607Z</published>
    <updated>2023-03-09T01:43:01.223Z</updated>
    
    <content type="html"><![CDATA[<p>查了2个多小时的方法，终于把网站搭载在github上面了，从现在开始网站能通过网络访问了！</p><p>网站git上传命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g </span><br></pre></td></tr></table></figure><p>github仓库默认的是main分支，所以会导致出现两个分支<br>记得把github仓库的默认分支从main改成master，不然更新不了网站<br>更新会稍微滞后一点</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.silenttwice.com/how-to-deploy-and-modify-the-local-hexo-source-files-after-they-are-deployed-to-github-pages/">https://www.silenttwice.com/how-to-deploy-and-modify-the-local-hexo-source-files-after-they-are-deployed-to-github-pages/</a><br><a href="https://blog.csdn.net/Lu_xiuyuan/article/details/112056997">https://blog.csdn.net/Lu_xiuyuan/article/details/112056997</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查了2个多小时的方法，终于把网站搭载在github上面了，从现在开始网站能通过网络访问了！&lt;/p&gt;
&lt;p&gt;网站git上传命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MarkDown语法测试</title>
    <link href="http://example.com/2023/03/09/MarkDown-test/"/>
    <id>http://example.com/2023/03/09/MarkDown-test/</id>
    <published>2023-03-08T17:12:35.420Z</published>
    <updated>2023-03-08T17:27:08.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br><span class="line"></span><br><span class="line">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class="line"></span><br><span class="line">Alt-H1</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">Alt-H2</span><br><span class="line">------</span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>Alternatively, for H1 and H2, an underline-ish style:</p><h1 id="Alt-H1"><a href="#Alt-H1" class="headerlink" title="Alt-H1"></a>Alt-H1</h1><h2 id="Alt-H2"><a href="#Alt-H2" class="headerlink" title="Alt-H2"></a>Alt-H2</h2><h1 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Emphasis, aka italics, with *asterisks* or _underscores_.</span><br><span class="line"></span><br><span class="line">Strong emphasis, aka bold, with **asterisks** or __underscores__.</span><br><span class="line"></span><br><span class="line">Combined emphasis with **asterisks and _underscores_**.</span><br><span class="line"></span><br><span class="line">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure><p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p><p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p><p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p><p>Strikethrough uses two tildes. <del>Scratch this.</del></p><h1 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1. First ordered list item</span><br><span class="line">2. Another item</span><br><span class="line">  * Unordered sub-list.</span><br><span class="line">1. Actual numbers don&#x27;t matter, just that it&#x27;s a number</span><br><span class="line">  1. Ordered sub-list</span><br><span class="line">4. And another item.</span><br><span class="line"></span><br><span class="line">   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#x27;ll use three here to also align the raw Markdown).</span><br><span class="line"></span><br><span class="line">   To have a line break without a paragraph, you will need to use two trailing spaces.  </span><br><span class="line">   Note that this line is separate, but within the same paragraph.  </span><br><span class="line">   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class="line"></span><br><span class="line">* Unordered list can use asterisks</span><br><span class="line">- Or minuses</span><br><span class="line">+ Or pluses</span><br><span class="line">- Paragraph In unordered list</span><br><span class="line"></span><br><span class="line">  For example like this.</span><br><span class="line"></span><br><span class="line">Common Paragraph with some text.</span><br><span class="line">And more text.</span><br></pre></td></tr></table></figure><ol><li>First ordered list item</li><li>Another item</li></ol><ul><li>Unordered sub-list.</li></ul><ol><li><p>Actual numbers don’t matter, just that it’s a number</p></li><li><p>Ordered sub-list</p></li><li><p>And another item.</p><p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p><p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p></li></ol><ul><li>Unordered list can use asterisks</li></ul><ul><li>Or minuses</li></ul><ul><li>Or pluses</li></ul><ul><li><p>Paragraph In unordered list</p><p>For example like this.</p></li></ul><p>Common Paragraph with some text.<br>And more text.</p><h1 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;To reboot your computer, press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;del&lt;/kbd&gt;.&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;Definition list&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[I&#x27;m an inline-style link](https://www.google.com)</span><br><span class="line"></span><br><span class="line">[I&#x27;m an inline-style link with title](https://www.google.com &quot;Google&#x27;s Homepage&quot;)</span><br><span class="line"></span><br><span class="line">[I&#x27;m a reference-style link][Arbitrary case-insensitive reference text]</span><br><span class="line"></span><br><span class="line">[I&#x27;m a relative reference to a repository file](../blob/master/LICENSE)</span><br><span class="line"></span><br><span class="line">[You can use numbers for reference-style link definitions][1]</span><br><span class="line"></span><br><span class="line">Or leave it empty and use the [link text itself]</span><br><span class="line"></span><br><span class="line">Some text to show that the reference links can follow later.</span><br><span class="line"></span><br><span class="line">[arbitrary case-insensitive reference text]: https://hexo.io</span><br><span class="line">[1]: https://hexo.io/docs/</span><br><span class="line">[link text itself]: https://hexo.io/api/</span><br></pre></td></tr></table></figure><p><a href="https://www.google.com/">I’m an inline-style link</a></p><p><a href="https://www.google.com/" title="Google&#39;s Homepage">I’m an inline-style link with title</a></p><p><a href="https://hexo.io/">I’m a reference-style link</a></p><p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p><p><a href="https://hexo.io/docs/">You can use numbers for reference-style link definitions</a></p><p>Or leave it empty and use the <a href="https://hexo.io/api/">link text itself</a></p><p>Some text to show that the reference links can follow later.</p><h1 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hover to see the title text:</span><br><span class="line"></span><br><span class="line">Inline-style:</span><br><span class="line"></span><br><span class="line">![alt text](https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 1&quot;)</span><br><span class="line"></span><br><span class="line">Reference-style:</span><br><span class="line">![alt text][logo]</span><br><span class="line"></span><br><span class="line">[logo]: https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 2&quot;</span><br></pre></td></tr></table></figure><p>hover to see the title text:</p><p>Inline-style:</p><p><img src="https://hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 1"></p><p>Reference-style:<br><img src="https://hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 2"></p><h1 id="Code-and-Syntax-Highlighting"><a href="#Code-and-Syntax-Highlighting" class="headerlink" title="Code and Syntax Highlighting"></a>Code and Syntax Highlighting</h1><p>Inline code has back-ticks around it.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s = &quot;JavaScript syntax highlighting&quot;;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Headers&quot;&gt;&lt;a href=&quot;#Headers&quot; class=&quot;headerlink&quot; title=&quot;Headers&quot;&gt;&lt;/a&gt;Headers&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Tell The World</title>
    <link href="http://example.com/2023/03/09/tell-the-world/"/>
    <id>http://example.com/2023/03/09/tell-the-world/</id>
    <published>2023-03-08T16:00:00.000Z</published>
    <updated>2023-03-08T17:29:27.605Z</updated>
    
    <content type="html"><![CDATA[<p>我的博客的第一条po！</p><h2 id="搭建技巧"><a href="#搭建技巧" class="headerlink" title="搭建技巧"></a>搭建技巧</h2><h3 id="参照："><a href="#参照：" class="headerlink" title="参照："></a>参照：</h3><p><a href="https://www.cnblogs.com/huanhao/p/hexobase.html">https://www.cnblogs.com/huanhao/p/hexobase.html</a><br><a href="https://blog.csdn.net/Jane_96/article/details/81451759">https://blog.csdn.net/Jane_96/article/details/81451759</a><br><a href="https://www.52txr.cn/2023/nextswig.html">https://www.52txr.cn/2023/nextswig.html</a><br>在使用npm安装时，改用cnpm调用国内镜像会快很多甚至关乎到是否能安装成功！</p><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h2 id="正在研究怎么架设到Github上！"><a href="#正在研究怎么架设到Github上！" class="headerlink" title="正在研究怎么架设到Github上！"></a>正在研究怎么架设到Github上！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的博客的第一条po！&lt;/p&gt;
&lt;h2 id=&quot;搭建技巧&quot;&gt;&lt;a href=&quot;#搭建技巧&quot; class=&quot;headerlink&quot; title=&quot;搭建技巧&quot;&gt;&lt;/a&gt;搭建技巧&lt;/h2&gt;&lt;h3 id=&quot;参照：&quot;&gt;&lt;a href=&quot;#参照：&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/08/hello-world/"/>
    <id>http://example.com/2023/03/08/hello-world/</id>
    <published>2023-03-08T15:33:18.190Z</published>
    <updated>2023-03-08T15:33:18.191Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
